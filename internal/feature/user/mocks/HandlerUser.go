// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/Sanchir01/go-shortener/internal/feature/user"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HandlerUser is an autogenerated mock type for the HandlerUser type
type HandlerUser struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *HandlerUser) Login(ctx context.Context, email string, password string) (*user.DatabaseUser, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *user.DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*user.DatabaseUser, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *user.DatabaseUser); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.DatabaseUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, email, username, password
func (_m *HandlerUser) Register(ctx context.Context, email string, username string, password string) (*uuid.UUID, error) {
	ret := _m.Called(ctx, email, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*uuid.UUID, error)); ok {
		return rf(ctx, email, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *uuid.UUID); ok {
		r0 = rf(ctx, email, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, email, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandlerUser creates a new instance of HandlerUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerUser {
	mock := &HandlerUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
