// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Sanchir01/go-shortener/internal/domain/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UrlHandler is an autogenerated mock type for the UrlHandler type
type UrlHandler struct {
	mock.Mock
}

// CreateUrl provides a mock function with given fields: ctx, userId, _a2
func (_m *UrlHandler) CreateUrl(ctx context.Context, userId uuid.UUID, _a2 string) error {
	ret := _m.Called(ctx, userId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userId, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUrl provides a mock function with given fields: ctx
func (_m *UrlHandler) GetAllUrl(ctx context.Context) ([]models.Url, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUrl")
	}

	var r0 []models.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Url, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Url); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlHandler creates a new instance of UrlHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlHandler {
	mock := &UrlHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
